#include "robot-config.h"
          
/*
Set the motors to the correct ports
*/
void left(double amount)
{
    Top_left.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_left.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Top_right.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_left.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, true);
}
void backward(double amount)
{
    Top_left.rotateFor(-amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_left.rotateFor(-amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Top_right.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_left.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, true);
}
void right(double amount)
{
    Top_left.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_left.rotateFor(-amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Top_right.rotateFor(-amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_left.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, true);
}
void forward(double amount)
{
    Top_left.rotateFor(-amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_left.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Top_right.rotateFor(amount, rotationUnits::deg, 100, velocityUnits::pct, false);
    Bottom_right.rotateFor(-amount, rotationUnits::deg, 100, velocityUnits::pct, true);
}
void victory_dance()
{
    Top_left.startRotateFor(720,rotationUnits::deg,100,velocityUnits::pct);
    Bottom_left.startRotateFor(720,rotationUnits::deg,100,velocityUnits::pct);
    Top_right.startRotateFor(720,rotationUnits::deg,100,velocityUnits::pct);
    Top_right.startRotateFor(720,rotationUnits::deg,100,velocityUnits::pct);
    Brain.Screen.print("V-I-C-T-O-R-Y--D-A-N-C-E");
}
void autonomous()
{
    left(20);
    forward(360);
    right(105);
    forward(720);
    left(45);
    forward(360);
    right(75);
    forward(1080);
    victory_dance();
}
int main() 
{
    while(true)
    {
        Controller1.ButtonL1.pressed(autonomous);
        if(Controller1.ButtonUp.pressing())
        {
            forward(360);
            task::sleep(100);
        }
        else if(Controller1.ButtonRight.pressing())
        {
            right(360);
            task::sleep(100);
        }
        else if(Controller1.ButtonLeft.pressing())
        {
            left(360);
            task::sleep(100);
        }
        else if(Controller1.ButtonDown.pressing())
        {
            backward(360);
            task::sleep(100);
        }
    }
}
